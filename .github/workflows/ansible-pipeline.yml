name: SummitEthic Ethical Infrastructure CI/CD

on:
  push:
    branches: [main]
    paths:
      - "ansible/**"
  pull_request:
    branches: [main]
    paths:
      - "ansible/**"
  workflow_dispatch:
    inputs:
      environment:
        description: "Environment to deploy to"
        required: true
        default: "development"
        type: choice
        options:
          - development
          - staging
          - production
      confirm_ethical_check:
        description: "Confirm ethical review has been completed"
        required: true
        type: boolean
        default: false

jobs:
  ethical_check:
    name: Ethical Code Analysis
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.10"

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install ansible ansible-lint yamllint colorama

      - name: Run ethical code check
        run: python scripts/ethical_code_check.py --all

      - name: Verify ethical labels in code
        run: |
          echo "Checking for ethical considerations in Ansible code..."
          grep -r "org.summitethic" ansible/ || echo "Warning: No ethical tags found in code"
          grep -r "ethical" ansible/ || echo "Warning: No explicit ethical considerations found"

  lint:
    name: Linting
    runs-on: ubuntu-latest
    needs: ethical_check
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.10"

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install ansible ansible-lint yamllint

      - name: Run ansible-lint
        run: ansible-lint ansible/

      - name: Run yamllint
        run: yamllint -c .yamllint ansible/

  security_scan:
    name: Security Scanning
    runs-on: ubuntu-latest
    needs: lint
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.10"

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install bandit ansible-vault-scanner

      - name: Scan for vulnerabilities
        run: bandit -r ansible/

      - name: Check for secrets
        uses: gitleaks/gitleaks-action@v2

      - name: Scan Ansible vaults
        run: |
          ansible-vault-scanner ansible/

  molecule_test:
    name: Molecule Testing
    runs-on: ubuntu-latest
    needs: lint
    strategy:
      matrix:
        role:
          - core/security
          - services/database
          - platform/api
          - monitoring
      fail-fast: false
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.10"

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install molecule molecule-docker pytest-testinfra docker

      - name: Run Molecule tests
        run: |
          cd ansible/roles/${{ matrix.role }}
          if [ -d "molecule" ]; then
            molecule test
          else
            echo "No Molecule tests found for role ${{ matrix.role }}"
          fi

  deploy:
    name: Deploy Infrastructure
    if: github.event_name == 'workflow_dispatch'
    needs: [ethical_check, lint, security_scan, molecule_test]
    runs-on: ubuntu-latest
    environment: ${{ github.event.inputs.environment }}
    steps:
      - name: Verify Ethical Review Confirmation
        if: github.event.inputs.confirm_ethical_check != 'true'
        run: |
          echo "::error::Ethical review confirmation is required before deployment"
          exit 1

      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.10"

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install ansible

      - name: Configure SSH key
        uses: webfactory/ssh-agent@v0.7.0
        with:
          ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY }}

      - name: Create Vault password file
        run: echo "${{ secrets.VAULT_PASSWORD }}" > .vault_pass

      - name: Display deployment plan
        run: |
          ansible-playbook -i ansible/inventories/${{ github.event.inputs.environment }}/inventory.yml ansible/playbooks/site.yml --check --diff

      - name: Confirm deployment
        id: confirm
        uses: actions/github-script@v6
        with:
          script: |
            const confirm = await core.promptForInput('Do you want to proceed with the deployment? (yes/no)', { default: 'no' });
            if (confirm.toLowerCase() !== 'yes') {
              core.setFailed('Deployment cancelled by user');
              return;
            }
            core.setOutput('deployment_confirmed', 'true');

      - name: Deploy infrastructure
        if: steps.confirm.outputs.deployment_confirmed == 'true'
        run: |
          ansible-playbook -i ansible/inventories/${{ github.event.inputs.environment }}/inventory.yml ansible/playbooks/site.yml

      - name: Run post-deployment tests
        if: steps.confirm.outputs.deployment_confirmed == 'true'
        run: |
          ansible-playbook -i ansible/inventories/${{ github.event.inputs.environment }}/inventory.yml ansible/playbooks/test.yml

      - name: Run ethical audit
        if: steps.confirm.outputs.deployment_confirmed == 'true'
        run: |
          ansible-playbook -i ansible/inventories/${{ github.event.inputs.environment }}/inventory.yml ansible/playbooks/ethical_audit.yml

      - name: Cleanup sensitive files
        if: always()
        run: rm -f .vault_pass

  notify:
    name: Notify Deployment Status
    if: github.event_name == 'workflow_dispatch' && always()
    needs: deploy
    runs-on: ubuntu-latest
    steps:
      - name: Notify success
        if: needs.deploy.result == 'success'
        uses: slackapi/slack-github-action@v1.23.0
        with:
          channel-id: "deployment-alerts"
          slack-message: "‚úÖ *Ethical Infrastructure Deployment Succeeded* üåü\nEnvironment: ${{ github.event.inputs.environment }}\nTriggered by: ${{ github.actor }}"
        env:
          SLACK_BOT_TOKEN: ${{ secrets.SLACK_BOT_TOKEN }}

      - name: Notify failure
        if: needs.deploy.result != 'success'
        uses: slackapi/slack-github-action@v1.23.0
        with:
          channel-id: "deployment-alerts"
          slack-message: "‚ùå *Ethical Infrastructure Deployment Failed* ‚ö†Ô∏è\nEnvironment: ${{ github.event.inputs.environment }}\nTriggered by: ${{ github.actor }}\nPlease check logs for details."
        env:
          SLACK_BOT_TOKEN: ${{ secrets.SLACK_BOT_TOKEN }}
