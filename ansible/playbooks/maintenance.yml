---
# SummitEthic Maintenance Playbook
# This playbook performs routine maintenance tasks on infrastructure

- name: Perform system maintenance tasks
  hosts: all
  become: true
  gather_facts: true
  vars:
    maintenance_date: "{{ lookup('pipe', 'date +%Y-%m-%d') }}"
    maintenance_log_dir: "/var/log/summitethic/maintenance"
    maintenance_log_file: "{{ maintenance_log_dir }}/{{ maintenance_date }}_{{ inventory_hostname }}.log"

  pre_tasks:
    - name: Create maintenance log directory
      file:
        path: "{{ maintenance_log_dir }}"
        state: directory
        owner: root
        group: root
        mode: 0750
      tags: [always]

    - name: Display maintenance notice
      debug:
        msg:
          - "SummitEthic Infrastructure Maintenance - {{ maintenance_date }}"
          - "Host: {{ inventory_hostname }}"
          - "This playbook performs routine maintenance tasks"
          - "Including updates, cleanup, and health checks"
      tags: [always]

  tasks:
    - name: Update package cache
      apt:
        update_cache: yes
        cache_valid_time: 3600
      when: ansible_os_family == "Debian"
      register: apt_update
      tags: [updates]

    - name: Upgrade installed packages
      apt:
        upgrade: "{{ package_upgrade_level | default('safe') }}"
      when: ansible_os_family == "Debian" and perform_upgrades | default(true)
      register: apt_upgrade
      tags: [updates]

    - name: Check for reboot required
      stat:
        path: /var/run/reboot-required
      register: reboot_required
      tags: [updates]

    - name: Notify if reboot is required
      debug:
        msg: "Host {{ inventory_hostname }} requires a reboot!"
      when: reboot_required.stat.exists
      tags: [updates]

    - name: Reboot system if required and authorized
      reboot:
        reboot_timeout: 600
        pre_reboot_delay: 0
        post_reboot_delay: 30
        test_command: uptime
        msg: "Rebooting due to system updates"
      when: reboot_required.stat.exists and auto_reboot | default(false)
      tags: [updates, reboot]

    - name: Clean apt packages
      apt:
        autoclean: yes
        autoremove: yes
      when: ansible_os_family == "Debian"
      tags: [cleanup]

    - name: Check disk space
      shell: df -h
      register: disk_space
      changed_when: false
      tags: [health]

    - name: Identify large files
      shell: find / -type f -size +100M -not -path "/proc/*" -not -path "/sys/*" -not -path "/dev/*" -not -path "/run/*" -exec ls -lh {} \; | sort -k5,5hr | head -n 10
      register: large_files
      changed_when: false
      tags: [cleanup]

    - name: Check for old log files
      find:
        paths: /var/log
        patterns: "*.log,*.gz"
        recurse: yes
        age: 30d
        size: 10m
      register: old_logs
      tags: [cleanup]

    - name: Summarize old log files
      debug:
        msg: "Found {{ old_logs.matched }} old log files consuming space"
      when: old_logs.matched > 0
      tags: [cleanup]

    - name: Clean Docker resources
      block:
        - name: Remove unused Docker containers
          shell: docker container prune -f
          register: container_prune
          changed_when: "'Total reclaimed space:' in container_prune.stdout"

        - name: Remove unused Docker images
          shell: docker image prune -f
          register: image_prune
          changed_when: "'Total reclaimed space:' in image_prune.stdout"

        - name: Remove unused Docker volumes
          shell: docker volume prune -f
          register: volume_prune
          changed_when: "'Total reclaimed space:' in volume_prune.stdout"

        - name: Remove unused Docker networks
          shell: docker network prune -f
          register: network_prune
          changed_when: "'removed' in network_prune.stdout"
      when: "'container_hosts' in group_names"
      tags: [docker, cleanup]

    - name: Check system service status
      shell: systemctl --failed --no-pager
      register: failed_services
      changed_when: false
      tags: [health]

    - name: Check for high CPU processes
      shell: ps -eo pcpu,pmem,pid,user,cmd | sort -k 1 -r | head -10
      register: high_cpu
      changed_when: false
      tags: [health]

    - name: Check memory status
      shell: free -h
      register: memory_status
      changed_when: false
      tags: [health]

    - name: Check for zombie processes
      shell: ps aux | grep Z | grep -v grep | wc -l
      register: zombie_count
      changed_when: false
      tags: [health]

    - name: Report zombie processes if present
      debug:
        msg: "Found {{ zombie_count.stdout }} zombie processes"
      when: zombie_count.stdout|int > 0
      tags: [health]

    - name: Verify critical services
      service_facts:
      tags: [health]

    - name: Check critical service status
      debug:
        msg: "Service {{ item }} is {{ ansible_facts.services[item].state }}"
      loop: "{{ critical_services | default(['ssh']) }}"
      when: item in ansible_facts.services
      tags: [health]

    - name: Update MOTD
      template:
        src: motd.j2
        dest: /etc/motd
        owner: root
        group: root
        mode: 0644
      tags: [config]

  post_tasks:
    - name: Generate maintenance report
      template:
        src: maintenance-report.j2
        dest: "{{ maintenance_log_file }}"
        owner: root
        group: root
        mode: 0644
      tags: [report]

    - name: Display maintenance completion message
      debug:
        msg: "Maintenance tasks completed on {{ inventory_hostname }}. Report saved to {{ maintenance_log_file }}"
      tags: [always]
